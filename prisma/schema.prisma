// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      Role      @default(CUSTOMER)
  phone     String?
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  type           AddressType
  isDefault      Boolean     @default(false)
  street1        String
  street2        String?
  city           String
  state          String
  country        String
  zipCode        String
  shippingOrders Order[]     @relation("ShippingAddress")
  billingOrders  Order[]     @relation("BillingAddress")
}

model Product {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  description        String
  price              Decimal
  compareAtPrice     Decimal?
  images             Image[]
  category           Category    @relation(fields: [categoryId], references: [id])
  categoryId         String
  tags               String[]
  sku                String      @unique
  barcode            String?
  inventoryAvailable Int         @default(0)
  inventoryReserved  Int         @default(0)
  isActive           Boolean     @default(true)
  weight             Float?
  length             Float?
  width              Float?
  height             Float?
  variants           Variant[]
  seoTitle           String?
  seoDescription     String?
  seoKeywords        String[]
  orderItems         OrderItem[]
  reviews            Review[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  altText   String?
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Variant {
  id        String  @id @default(uuid())
  name      String
  sku       String?
  price     Decimal
  inventory Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id             String     @id @default(uuid())
  name           String
  slug           String     @unique
  description    String?
  parent         Category?  @relation("SubCategories", fields: [parentId], references: [id])
  parentId       String?
  children       Category[] @relation("SubCategories")
  level          Int        @default(0)
  image          String?
  isActive       Boolean    @default(true)
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  products       Product[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Order {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  items             OrderItem[]
  total             Decimal
  status            OrderStatus   @default(PENDING)
  shippingAddress   Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress    Address       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String
  shippingMethod    String
  shippingCost      Decimal
  tax               Decimal
  paymentMethod     String
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

enum AddressType {
  BILLING
  SHIPPING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
